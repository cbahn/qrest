{% extends "menu_layout.jinja2" %}

{% block content %}
<main class="container">
  <section id="home">
    <h1 class="admin-interface-gradient">Admin Locations</h1>
    <table>
      <thead>
        <tr>
          <th style="padding-left:0px;">Name</th>
          <th>Actions</th>
          <th>Change Discovery Status</th>
        </tr>
      </thead>
      <tbody>
        {% for loc in locations %}
        <tr>
          <td style="padding-left:0px;">
            <img src="{{ url_for('static', filename='uploads/' ~ loc.imageFile) }}"
                 alt="{{ loc.fullName }} thumbnail"
                 style="width:40px; height:auto; margin-right:8px; vertical-align:middle;">
            <a href="{{ url_for('location_bp_x.location', loc_slug=loc.slug) }}">{{ loc.fullName }}</a>
          </td>
          <td>
            <!-- Note the added data-loc-name attribute -->
            <button type="button"
                    class="secondary small-button delete-btn"
                    data-delete-url="{{ url_for('admin_bp_x.delete_location', loc_slug=loc.slug) }}"
                    data-loc-name="{{ loc.fullName }}">
              Delete
            </button>
          </td>
          <td>
            <details class="dropdown">
              <summary></summary>
              <ul>
                  <li><a href="#" class="change-status" data-status="undiscovered" data-loc-id="{{ loc.locationID }}">Undiscovered</a></li>
                  <li><a href="#" class="change-status" data-status="discovered" data-loc-id="{{ loc.locationID }}">Discovered</a></li>
                  <li><a href="#" class="change-status" data-status="solved" data-loc-id="{{ loc.locationID }}">Solved</a></li>
              </ul>
            </details>
          </td>
        </tr>
        {% endfor %}
      </tbody>
    </table>
  </section>
</main>

<!-- Delete Confirmation Modal -->
<dialog id="deleteModal">
  <article>
    <header>
      <h3>Confirm Deletion</h3>
    </header>
    <!-- The message will be updated with the location's name -->
    <p id="deleteModalMessage"></p>
    <!-- Input field where the admin must type the location name -->
    <input type="text"
           id="deleteConfirmInput"
           placeholder="Type location name here"
           style="width: 100%; padding: 0.5rem; margin-bottom: 1rem;" />
    <footer>
      <button type="button" class="secondary outline" onclick="closeDeleteModal()">Cancel</button>
      <!-- Confirm button starts disabled -->
      <button type="button" id="confirmDeleteButton" disabled onclick="confirmDeletion()">Delete</button>
    </footer>
  </article>
</dialog>

<!-- Optional inline styles for smaller delete buttons and modal appearance -->
<style>
  .small-button {
    padding: 0.25rem 0.5rem;
    font-size: 0.9rem;
    line-height: 1;
  }
  dialog {
    border: none;
    border-radius: 0.5rem;
    box-shadow: 0 0 10px rgba(0,0,0,0.25);
  }
</style>

<!-- JavaScript for modal behavior and status change -->
<script>
  // Global variables to store the delete URL and the current location name
  let currentDeleteUrl = null;
  let currentLocationName = null;

  const deleteModal = document.getElementById('deleteModal');
  const deleteConfirmInput = document.getElementById('deleteConfirmInput');
  const confirmDeleteButton = document.getElementById('confirmDeleteButton');
  const deleteModalMessage = document.getElementById('deleteModalMessage');

  // Attach event listeners to each delete button
  document.querySelectorAll('.delete-btn').forEach(function(button) {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      // Get URL and location name from data attributes
      currentDeleteUrl = this.getAttribute('data-delete-url');
      currentLocationName = this.getAttribute('data-loc-name');
      
      // Update the modal message with the location's name
      deleteModalMessage.textContent =
        `You are about to delete "${currentLocationName}". If a location is deleted, it can mess with the visit history of everybody who's been to that location. It'll be possible to fix that, but maybe talk to Carl first. Do you really want to delete this location? ` +
        `Type the location name below then hit confirm.`;
      
      // Clear any previous input and disable the confirm button
      deleteConfirmInput.value = '';
      confirmDeleteButton.disabled = true;
      
      // Show the modal
      deleteModal.showModal();
    });
  });

  // Enable the confirm button only when the input exactly matches the location name
  deleteConfirmInput.addEventListener('input', function() {
    if (this.value === currentLocationName) {
      confirmDeleteButton.disabled = false;
    } else {
      confirmDeleteButton.disabled = true;
    }
  });

  function closeDeleteModal() {
    deleteModal.close();
    currentDeleteUrl = null;
    currentLocationName = null;
  }

  function confirmDeletion() {
    if (!currentDeleteUrl) return;

    fetch(currentDeleteUrl, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('Deletion failed.');
      }
    })
    .then(data => {
      window.location.reload();
    })
    .catch(error => {
      window.location.reload();
    });

    // Close the modal immediately.
    deleteModal.close();
  }

  // Change status functionality remains unchanged
  document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".change-status").forEach(function (item) {
      item.addEventListener("click", function (event) {
        event.preventDefault();

        const locationID = this.getAttribute("data-loc-id");
        const newStatus = this.getAttribute("data-status");

        fetch("/admin/change_discovery_status", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
          },
          body: JSON.stringify({
            locationID: locationID,
            status: newStatus,
          }),
        })
        .then(response => {
          if (!response.ok) {
            throw new Error("Failed to update status.");
          }
          return response.json();
        })
        .then(data => {
          console.log("Status updated:", data);
          setTimeout(() => {
            location.reload();
          }, 3000);
        })
        .catch(error => {
          console.error("Error updating status:", error);
        });
      });
    });
  });
</script>
{% endblock %}
